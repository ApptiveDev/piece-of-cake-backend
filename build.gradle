buildscript {
	ext {
		restdocsApiSpecVersion = '0.17.1'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	// openAPI 플러그인 추가
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
	// swaggerUI 플러그인 추가
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'apptive'
version = '0.0.3-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(19)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

// 생성된 API 스펙이 어느 위치에 있는지 지정
swaggerSources {
	sample {
		setInputFile(file("${project.buildDir}/api-spec/openapi3.json"))
	}
}

// openapi3 스펙 생성시 설정 정보
openapi3 {
	servers = [
			{ url = 'http://localhost:8080' }
			//{ url = 'http://43.201.0.113:8080' }
	]
	title = 'Piece of Cake Service API'
	description = 'Piece of Cake Service API description'
	version = '0.0.4'
	format = 'json'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// database
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// model-mapper
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'

	// S3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// RestDocs 추가
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	// openAPI3 추가
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:' + restdocsApiSpecVersion
	// SwaggerUI 추가
	swaggerUI 'org.webjars:swagger-ui:4.11.1'

	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2'
}

tasks.named('test') {
	useJUnitPlatform()
}

// openapi3가 먼저 실행 - doFrist를 통한 Header 설정 (글에서 자세하게 설명)
tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'
	doFirst {
		def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.json")

		def securitySchemesContent =  "  securitySchemes:\n" +  \
                                      "    APIKey:\n" +  \
                                      "      type: apiKey\n" +  \
                                      "      name: Authorization\n" +  \
                                      "      in: header\n" + \
                                      "security:\n" +
				"  - APIKey: []  # Apply the security scheme here"

		swaggerUIFile.append securitySchemesContent
	}
}

// 생성된 openapi3 스펙을 기반으로 SwaggerUISample 생성 및 static/docs 패키지에 복사
bootJar {
	dependsOn generateSwaggerUISample
	from("${generateSwaggerUISample.outputDir}") {
		into 'resources/static/'
	}
}

task copySwaggerUI(type: Copy) {
	from 'build/swagger-ui-sample'
	into 'src/main/resources/static'
	include '**/*'
}

build.dependsOn copySwaggerUI

tasks.named('processResources') {
	dependsOn 'copySwaggerUI'
}
